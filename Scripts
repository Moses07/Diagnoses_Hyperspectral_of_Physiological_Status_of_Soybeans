import pandas as pd
import numpy as np
import csv
import os
import random
import torch
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import transformers
import sklearn.model_selection as model_selection
from transformers import GPT2ForSequenceClassification, GPT2TokenizerFast, GPT2Config
import time
import copy
from tqdm.notebook import tqdm



import numpy as np
import matplotlib.pyplot as plt
import math
import copy


mean = [0,0]
cov = [[1,0], [0,1]]
size = 1200
factor = 13
cases = 3
samples = 35
verbose = True
x, y = np.random.multivariate_normal(mean, cov, size).T

def split_nutrient_02(data):
    nutrient_02 = []
    not_nutrient_02 = []
    for i in data:
        if i[2] == 1 or i[2] == 2:
            nutrient_02.append(tuple(i))
        else:
            not_nutrient_02.append(tuple(i))
    return nutrient_02, not_nutrient_02

def plot_nutrient(data, accum_nutrient_02):
    nutrient_02, not_nutrient_02 = split_nutrient_02(data)
    x_nutrient_02 = [i[0] for i in nutrient_02]
    y_nutrient_02 = [i[1] for i in nutrient_02]
    x_not_nutrient_02 = [i[0] for i in not_nutrient_02]
    y_not_nutrient_02 = [i[1] for i in not_nutrient_02]
    plt.scatter(x_not_nutrient_02, y_not_nutrient_02, color='b', alpha=0.1)
    plt.scatter(x_nutrient_02, y_nutrient_02, color='r', alpha=0.3)
    plt.title(f"COVID-19 Estimator J. ChÃ¡vez")
    plt.ylabel("Total nutrient_02")
    plt.xlabel("Days")
    plt.show()

def distance(a,b):
    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)

def iterate(data, factor):
    total_nutrient_02 = 0
    for i in data:
        if i[2] == 1:
            i[2] = 2
            # Search k nearest neighbours
            for j in data:
                j[3] = distance(j[0:2], i[0:2])

            # Order by distance
            data = data[data[:,3].argsort()]
        
            aislamiento = i[0]**2 + i[1]**2
            aislamiento = aislamiento if aislamiento != 0 else 0.01

            beta_exp = factor*(1/(1+math.e**(-.1/aislamiento)))**2
            k = round(np.random.exponential(beta_exp))
            
            sum = 0
            for j in range(1,k+2):
                if data[j][2] == 0: #If not nutrient_02
                    data[j][2] = 1
                    sum += 1

            total_nutrient_02 += sum

    return total_nutrient_02, data


               


# Data -> [x,y,nutrient_02,dummy]
data = zip(x, y)
data = [list(p) for p in data]
for i in data:
    i.append(0)
    i.append(0)

data = np.array(data)

### Nutrient
for i in range(cases):
    case = np.random.randint(0, size)
    data[case][2] = 1

accum_nutrient_02 = [cases]
if verbose:
    plot_nutrient(data, cases)
for i in range(episodes):
    nutrient_02, data = iterate(data, factor)
    accum_nutrient_02.append(nutrient_02+accum_nutrient_02[-1])
    if i > 0:
        print(f"dia {i} - acc {accum_nutrient_02[-1]} - %crec {accum_nutrient_02[-1]/accum_nutrient_02[-2]}")
    if verbose:
        plot_nutrient(data, accum_nutrient_02[-1])

plt.plot(accum_nutrient_Macros)
plt.title("Nutrients content")
plt.ylabel("Total nutrient_Macro")
plt.xlabel("Concentration")
plt.show()
